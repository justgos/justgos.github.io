{"version":3,"sources":["config.js","core/state.js","util/time.js","data/ProjectData.js","components/SceneController.js","util/HTMLRenderer.js","compute/GPUComputationRenderer.js","shaders/PixelSwarmShader.js","shaders/SimplexNoise.js","shaders/PixelSwarmComputeShaders.js","components/PixelSwarm.js","util/array.js","components/SwarmTarget.js","components/ProjectInfo.js","App.js","serviceWorker.js","index.js"],"names":["dpi","window","devicePixelRatio","allReducers","combineReducers","swarmTargets","state","action","type","payload","target","data","store","createStore","sleep","ms","Promise","resolve","setTimeout","ProjectData","inProgress","id","name","desc","href","rel","tech","links","label","url","video","previewType","previewSize","previewScale","archive","image","SceneController","children","useThree","size","width","height","camera","useMemo","value","performance","now","fpsCount","lastTime","lastReportTime","sceneRef","useRef","mainLight","useState","useFrame","curTime","scrollTop","document","scrollingElement","position","x","y","current","Math","round","ref","intensity","rotation","THREE","castShadow","HTMLRenderer","dummyCanvas","createElement","reject","img","Image","onload","onerror","src","AwaitImageLoad","canvas","className","body","appendChild","ctx","getContext","scale","clearRect","drawImage","pixels","getImageData","removeChild","GPUComputationRenderer","sizeX","sizeY","renderer","this","variables","currentTextureIndex","scene","z","passThruUniforms","passThruTexture","passThruShader","createShaderMaterial","mesh","addResolutionDefine","materialShader","defines","resolution","toFixed","computeFragmentShader","uniforms","material","vertexShader","fragmentShader","add","addVariable","variableName","initialValueTexture","variable","dependencies","renderTargets","wrapS","wrapT","minFilter","magFilter","push","setVariableDependencies","init","extensions","get","capabilities","isWebGL2","maxVertexTextures","i","length","createRenderTarget","renderTexture","d","depVar","found","j","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","format","stencilBuffer","depthBuffer","createTexture","Float32Array","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render","PixelSwarmShader","options","blending","depthTest","transparent","vertexColors","time","targetType","positionTex","colorTex","pointTexture","pointScale","posOffset","SimplexNoise3D","PixelSwarmTargetPositionShader","PixelSwarmVelocityShader","PixelSwarmPositionShader","PixelSwarmColorShader","PixelSwarm","n","computeTexSize","gl","setTarget","getState","targets","setTargets","subscribe","positions","arr","random","references","floor","fillPositionTex","tex","texData","fillZeroTex","gpuCompute","targetPositionTex","velocityTex","targetColorTex","targetPositionVariable","velocityVariable","positionVariable","colorVariable","error","console","useEffect","needsUpdate","colors","loader","load","swarmShader","lastTargetOffset","intendedTarget","dtime","min","viewport","max","documentElement","clientWidth","innerWidth","clientHeight","innerHeight","maxPriority","targetIds","Object","keys","el","getElementById","offsetTop","offsetHeight","priority","targetEl","targetSize","offsetWidth","targetOffset","offsetLeft","dTargetOffset","velocityNoiseScale","points","frustumCulled","attach","attachObject","count","array","itemSize","args","shuffle","a","stride","repeatIndices","repeatStride","ii","indices","k","connect","ownProps","targetData","dispatch","updateSwarmTarget","removeSwarmTarget","newTargetData","renderImage","pix","shuffleIndices","renderContent","style","ProjectInfo","project","key","map","link","alt","autoPlay","playsInline","loop","muted","App","locked","setLocked","logoShape","setLogoShape","revealStage","setRevealStage","reveal","fov","near","far","orthographic","pixelRatio","onCreated","shadowMap","enabled","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15967885.chunk.js","sourcesContent":["export const dpi = window.devicePixelRatio || 1;\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nexport const updateSwarmTarget = (target, data) => {\r\n    return {\r\n        type: 'UPDATE',\r\n        payload: {\r\n            target,\r\n            data\r\n        }\r\n    }\r\n};\r\n\r\nexport const removeSwarmTarget = (target) => {\r\n    return {\r\n        type: 'REMOVE',\r\n        payload: {\r\n            target\r\n        }\r\n    }\r\n};\r\n\r\nexport const swarmTargets = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case 'UPDATE':\r\n            state[action.payload.target] = action.payload.data;\r\n            return state;\r\n        case 'REMOVE':\r\n            delete state[action.payload.target];\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const allReducers = combineReducers({\r\n    swarmTargets\r\n});\r\n\r\nexport const store = createStore(\r\n    allReducers\r\n);\r\n","export function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import React from 'react'\r\n\r\nexport const ProjectData = {\r\n  inProgress: [\r\n    {\r\n      id: \"excog\",\r\n      name: \"Extended Knowledge\",\r\n      desc: (\r\n        <div>\r\n          A tool for thinking on scales larger/longer than mindmaps usually allow for.<br/>\r\n          Augmented with <a href=\"https://en.wikipedia.org/wiki/Extended_cognition\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a> data\r\n        </div>\r\n      ),\r\n      tech: [\"React\", \"Canvas rendering\", \"socket.io\", \"Node.js\", \"Mongo\", \"Neo4j\", \"ElasticSearch\"],\r\n      links: [\r\n        { label: \"website\", url: \"https://extendedcognition.org/\" },\r\n        // { label: \"video\", url: \"https://youtu.be/Pn0lUIH5Fy8\" },\r\n        { label: \"my graph\", url: \"https://extendedcognition.org/graph/justgos\" },\r\n      ],\r\n      // image: \"/textures/project-excog-image.png\",\r\n      video: \"/video/ex-k.mp4\",\r\n      previewType: \"generative-excog\",\r\n      previewSize: [ 400, 400 ],\r\n    },\r\n    {\r\n      id: \"thingness\",\r\n      name: \"Thingness\",\r\n      desc: (\r\n        <div>\r\n          Evolutionary exploration of cell-level morphogenesis in 2D\r\n        </div>\r\n      ),\r\n      tech: [\"Python\"],\r\n      links: [\r\n        { label: \"github\", url: \"https://github.com/justgos/thingness\" },\r\n      ],\r\n      // image: \"/textures/project-thingness-image.png\",\r\n      video: \"/video/thingness.mp4\",\r\n      previewType: \"generative-thomas\",\r\n      previewSize: [ 400, 400 ],\r\n    },\r\n    {\r\n      id: \"eso\",\r\n      name: \"EcoSystemOne\",\r\n      desc: (\r\n        <div>\r\n          A platform where you learn by teaching others — by telling stories together, in&nbsp;VR\r\n        </div>\r\n      ),\r\n      tech: [\"Unity (Photon, SteamVR)\", \"Node.js\", \"Mongo\", \"ElasticSearch\", \"Python\", \"AWS\", \"Docker Swarm\"],\r\n      links: [\r\n        { label: \"website\", url: \"https://ecosystemone.com/\" },\r\n      ],\r\n      // image: \"/textures/project-eso-image.png\",\r\n      video: \"/video/act.mp4\",\r\n      previewType: \"content\",\r\n      previewSize: [ 400, 400 ],\r\n      previewScale: 7,\r\n    },\r\n  ],\r\n  archive: [\r\n    {\r\n      id: \"body-evo\",\r\n      name: \"Mind-body evolution\",\r\n      desc: (\r\n        <div>\r\n          Agents can evolve new limbs, which add new sensory and motor neurons.<br/>\r\n          Mind is a Spiking Neural Network, implemented in <a href=\"https://brian2.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">brian2</a> and using <a href=\"http://www.izhikevich.org/publications/spikes.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Izhikevich</a> cells dynamics.\r\n        </div>\r\n      ),\r\n      tech: [\"Python (Brian2)\", \"Unity\", \"ZeroMQ\"],\r\n      // links: [\r\n      //   { label: \"website\", url: \"https://ecosystemone.com/\" },\r\n      // ],\r\n      image: \"/textures/body-evo-mind-structure.jpg\",\r\n      previewType: \"generative-van-der-pol\",\r\n      previewSize: [ 400, 400 ],\r\n    },\r\n    {\r\n      id: \"brave-gen\",\r\n      name: \"Artificial worlds\",\r\n      desc: (\r\n        <div>\r\n          Terrain generation and object placement are inspired by <a href=\"https://www.youtube.com/watch?v=SePDzis8HqY\" target=\"_blank\" rel=\"noopener noreferrer\">No Man's Sky</a>.<br/>\r\n          Air dynamics are a voxel-based simulation, based on <a href=\"http://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch38.html\" target=\"_blank\" rel=\"noopener noreferrer\">GPU Gems</a> article.\r\n          {/* <p>\r\n            Originally meant to be a dynamic environment for artificial agents to adapt to, but it hasn't got to that point\r\n          </p> */}\r\n        </div>\r\n      ),\r\n      tech: [\"Unity\", \"Python\"],\r\n      links: [\r\n        { label: \"github\", url: \"https://github.com/justgos/brave-gen\" },\r\n      ],\r\n      // image: \"/textures/project--image.png\",\r\n      video: \"/video/brave-gen.mp4\",\r\n      previewType: \"generative-van-der-pol\",\r\n      previewSize: [ 400, 400 ],\r\n    },\r\n    {\r\n      id: \"l2mapper\",\r\n      name: \"Map viewer for Lineage II\",\r\n      desc: (\r\n        <div>\r\n          In a time of being somewhat obsessed with the game, spent a few weeks dawn till dusk trying to find ways to read an altered Unreal Engine data format and understanding how it's meant to be visualized.\r\n        </div>\r\n      ),\r\n      tech: [\"C++\", \"OpenGL\"],\r\n      links: [\r\n        { label: \"github\", url: \"https://github.com/justgos/l2mapper\" },\r\n      ],\r\n      image: \"/textures/l2mapper.jpg\",\r\n      previewType: \"content\",\r\n      previewSize: [ 500, 379 ],\r\n      previewScale: 8,\r\n    },\r\n  ],\r\n}\r\n      ","import * as THREE from 'three'\r\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\r\nimport { apply as applySpring, useSpring, a, interpolate } from 'react-spring/three'\r\n\r\nimport { dpi } from '../config'\r\n\r\nexport default function SceneController({ children }) {\r\n  const {\r\n    size: { width, height },\r\n    camera,\r\n  } = useThree();\r\n\r\n  const [ fpsCount, lastTime, lastReportTime]  = useMemo(\r\n    () => {\r\n      return [ { value: 0 }, { value: performance.now() }, { value: performance.now() } ]\r\n    }, []\r\n  );\r\n  const sceneRef = useRef();\r\n  const mainLight = useRef();\r\n  const [ swarmTarget, setSwarmTarget ] = useState(\"logo\");\r\n  useFrame(() => {\r\n    let curTime = performance.now();\r\n    let dtime = (curTime - lastTime.value) / 1000;\r\n    lastTime.value = curTime;\r\n    fpsCount.value++;\r\n    if(curTime > lastReportTime.value + 1000.0) {\r\n        // console.log('fps', fpsCount.value);\r\n        lastReportTime.value = curTime;\r\n        fpsCount.value = 0;\r\n    }\r\n\r\n    let scrollTop = document.scrollingElement.scrollTop;\r\n\r\n    camera.position.x = width / 2;\r\n    camera.position.y = -height / 2;\r\n\r\n    // mainLight.current.position.x = width / 2 + 200;\r\n    // mainLight.current.position.y = -height / 2 + 100;\r\n    mainLight.current.position.y = -scrollTop;\r\n\r\n    sceneRef.current.position.y = Math.round(scrollTop * dpi) / dpi\r\n  });\r\n\r\n  return (\r\n      <scene ref={sceneRef}>\r\n        <ambientLight intensity={0.5} />\r\n        <directionalLight intensity={0.6} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} castShadow ref={mainLight} />\r\n        {/* <spotLight intensity={0.7} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} angle={Math.PI / 2} penumbra={1} castShadow ref={mainLight} /> */}\r\n        {children}\r\n      </scene>\r\n  );\r\n}\r\n","import ReactDOM from 'react-dom'\r\n\r\nimport { dpi } from '../config'\r\n\r\nexport default class HTMLRenderer {\r\n  static dummyCanvas;\r\n  static offscreenCanvas;\r\n\r\n  static getDummyCanvas() {\r\n    if(!HTMLRenderer.dummyCanvas) {\r\n      HTMLRenderer.dummyCanvas = document.createElement('canvas');\r\n      HTMLRenderer.dummyCanvas.width = HTMLRenderer.dummyCanvas.height = 1;\r\n    }\r\n    return HTMLRenderer.dummyCanvas;\r\n  }\r\n\r\n  static AwaitImageLoad(url, size) {\r\n    return new Promise((resolve, reject) => {\r\n      let img = new Image()\r\n      // img.width = size[0];\r\n      // img.height = size[1];\r\n      img.onload = () => resolve(img)\r\n      img.onerror = reject\r\n      img.src = url\r\n    });\r\n  }\r\n\r\n  static async renderImage(url, size) {\r\n    let img = await HTMLRenderer.AwaitImageLoad(url, size);\r\n    let canvas = document.createElement('canvas');\r\n    canvas.className = \"html-render-container\";\r\n    document.body.appendChild(canvas); \r\n    canvas.width = size[0] * dpi;\r\n    canvas.height = size[1] * dpi;\r\n    let ctx = canvas.getContext(\"2d\");\r\n    ctx.scale(dpi, dpi);\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    // ctx.beginPath();\r\n    // ctx.moveTo(0, 0);\r\n    // ctx.lineTo(150, 150);\r\n    // ctx.stroke();\r\n    ctx.drawImage(img, 0, 0, size[0], size[1]);\r\n    let pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\r\n\r\n    document.body.removeChild(canvas);\r\n    return pixels;\r\n  }\r\n}\r\n","/**\n * @author yomboprime https://github.com/yomboprime\n *\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new THREE.GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n  */\n\nimport * as THREE from 'three'\n\nconst GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\n\n\tthis.variables = [];\n\n\tthis.currentTextureIndex = 0;\n\n\tvar scene = new THREE.Scene();\n\n\tvar camera = new THREE.Camera();\n\tcamera.position.z = 1;\n\n\tvar passThruUniforms = {\n\t\tpassThruTexture: { value: null }\n\t};\n\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\tvar mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), passThruShader );\n\tscene.add( mesh );\n\n\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\n\n\t\tvar variable = {\n\t\t\tname: variableName,\n\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\tmaterial: material,\n\t\t\tdependencies: null,\n\t\t\trenderTargets: [],\n\t\t\twrapS: null,\n\t\t\twrapT: null,\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter\n\t\t};\n\n\t\tthis.variables.push( variable );\n\n\t\treturn variable;\n\n\t};\n\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\tvariable.dependencies = dependencies;\n\n\t};\n\n\tthis.init = function () {\n\n\t\tif ( ! renderer.extensions.get( \"OES_texture_float\" ) &&\n\t\t\t ! renderer.capabilities.isWebGL2 ) {\n\n\t\t\treturn \"No OES_texture_float support for float textures.\";\n\n\t\t}\n\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\treturn \"No support for vertex shader textures.\";\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\tvar material = variable.material;\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\tmaterial.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\treturn null;\n\n\t};\n\n\tthis.compute = function () {\n\n\t\tvar currentTextureIndex = this.currentTextureIndex;\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Sets texture dependencies uniforms\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tvar uniforms = variable.material.uniforms;\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Performs the computation for this variable\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t}\n\n\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t};\n\n\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t};\n\n\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t};\n\n\tfunction addResolutionDefine( materialShader ) {\n\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\n\n\t}\n\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t// The following functions can be used to compute things manually\n\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\tuniforms = uniforms || {};\n\n\t\tvar material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\tfragmentShader: computeFragmentShader\n\t\t} );\n\n\t\taddResolutionDefine( material );\n\n\t\treturn material;\n\n\t}\n\n\tthis.createShaderMaterial = createShaderMaterial;\n\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\twrapS = wrapS || THREE.ClampToEdgeWrapping;\n\t\twrapT = wrapT || THREE.ClampToEdgeWrapping;\n\n\t\tminFilter = minFilter || THREE.NearestFilter;\n\t\tmagFilter = magFilter || THREE.NearestFilter;\n\n\t\tvar renderTarget = new THREE.WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\t// type: ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) ? THREE.HalfFloatType : THREE.FloatType,\n\t\t\ttype: THREE.FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false\n\t\t} );\n\n\t\treturn renderTarget;\n\n\t};\n\n\tthis.createTexture = function () {\n\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\n\t\treturn new THREE.DataTexture( data, sizeX, sizeY, THREE.RGBAFormat, THREE.FloatType );\n\n\t};\n\n\tthis.renderTexture = function ( input, output ) {\n\n\t\t// Takes a texture, and render out in rendertarget\n\t\t// input = Texture\n\t\t// output = RenderTarget\n\n\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t};\n\n\tthis.doRenderTarget = function ( material, output ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tmesh.material = material;\n\t\trenderer.setRenderTarget( output );\n\t\trenderer.render( scene, camera );\n\t\tmesh.material = passThruShader;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\t// Shaders\n\n\tfunction getPassThroughVertexShader() {\n\n\t\treturn\t\"void main()\t{\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n\tfunction getPassThroughFragmentShader() {\n\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"void main() {\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n};\n\nexport default GPUComputationRenderer;\n","import * as THREE from 'three'\r\n\r\nexport default class PixelSwarmShader extends THREE.ShaderMaterial {\r\n  constructor(options) {\r\n    super({\r\n      vertexShader: `\r\n        attribute vec2 reference;\r\n        varying vec4 vColor;\r\n        uniform float time;\r\n        uniform sampler2D positionTex;\r\n        uniform sampler2D colorTex;\r\n        uniform float pointScale;\r\n        uniform vec2 posOffset;\r\n        uniform int targetType;\r\n\r\n        vec2 unpack2HalfToRGBA(vec4 v) {\r\n          return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\r\n        }\r\n\r\n        void main() {\r\n            // vColor.xyz = color;\r\n            // vColor.w = alpha;\r\n            vColor = texture2D(colorTex, reference);\r\n            // vColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n            if(targetType == 2) {\r\n              vColor.w = pow(abs(sin(time * 0.5 + reference.x * 10.0)), 2.0);\r\n            }\r\n\r\n            vec4 pos = texture2D(positionTex, reference);\r\n            pos.xy += posOffset;\r\n            pos.z = 0.0;\r\n            // vec2 pos1 = unpack2HalfToRGBA(texture2D(positionTex, reference.xy));\r\n            // vec2 pos2 = unpack2HalfToRGBA(texture2D(positionTex, reference.zw));\r\n            // vec4 pos = vec4(pos1.x, pos1.y, pos2.x, 1.0);\r\n            vec4 mvPosition = modelViewMatrix * vec4( pos.xyz, 1.0 );\r\n            gl_PointSize = pointScale;  //  * abs(texture2D(posTexture, vec2(position.x / 1000.0, 0.0)).x)\r\n            gl_Position = projectionMatrix * mvPosition;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D pointTexture;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          // gl_FragColor = vec4( vColor, 1.0 );\r\n          gl_FragColor = vColor;\r\n          // gl_FragColor = vec4(1.0, 1.0, 1.0, vColor.w) * texture2D(pointTexture, gl_PointCoord);\r\n          gl_FragColor.w *= 0.4;\r\n        }\r\n      `,\r\n      // blendSrc: THREE.SrcAlphaFactor,\r\n      // blendDst: THREE.OneMinusSrcColorFactor,\r\n      // blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      blending: THREE.AdditiveBlending,\r\n      // blending: THREE.NormalBlending,\r\n      depthTest: false,\r\n      transparent: true,\r\n      vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      time: { value: options.time },\r\n      targetType: { value: options.targetType },\r\n      positionTex: { value: options.positionTex },\r\n      colorTex: { value: options.colorTex },\r\n      pointTexture: { value: options.pointTexture },\r\n      pointScale: { value: options.pointScale },\r\n      posOffset: { value: options.posOffset }\r\n    }\r\n  }\r\n}\r\n","export const SimplexNoise2D = `\r\n  // Simplex 2D noise\r\n  //\r\n  vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\r\n\r\n  float snoise(vec2 v){\r\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\r\n            -0.577350269189626, 0.024390243902439);\r\n    vec2 i  = floor(v + dot(v, C.yy) );\r\n    vec2 x0 = v -   i + dot(i, C.xx);\r\n    vec2 i1;\r\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n    vec4 x12 = x0.xyxy + C.xxzz;\r\n    x12.xy -= i1;\r\n    i = mod(i, 289.0);\r\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n    + i.x + vec3(0.0, i1.x, 1.0 ));\r\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n      dot(x12.zw,x12.zw)), 0.0);\r\n    m = m*m ;\r\n    m = m*m ;\r\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n    vec3 h = abs(x) - 0.5;\r\n    vec3 ox = floor(x + 0.5);\r\n    vec3 a0 = x - ox;\r\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\r\n    vec3 g;\r\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\r\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n    return 130.0 * dot(m, g);\r\n  }\r\n`\r\n\r\nexport const SimplexNoise3D = `\r\n  //\tSimplex 3D Noise \r\n  //\tby Ian McEwan, Ashima Arts\r\n  //\r\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\r\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\r\n\r\n  float snoise(vec3 v){ \r\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\r\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\r\n\r\n    // First corner\r\n    vec3 i  = floor(v + dot(v, C.yyy) );\r\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\r\n\r\n    // Other corners\r\n    vec3 g = step(x0.yzx, x0.xyz);\r\n    vec3 l = 1.0 - g;\r\n    vec3 i1 = min( g.xyz, l.zxy );\r\n    vec3 i2 = max( g.xyz, l.zxy );\r\n\r\n    //  x0 = x0 - 0. + 0.0 * C \r\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\r\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\r\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\r\n\r\n    // Permutations\r\n    i = mod(i, 289.0 ); \r\n    vec4 p = permute( permute( permute( \r\n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\r\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \r\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\r\n\r\n    // Gradients\r\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\r\n    float n_ = 1.0/7.0; // N=7\r\n    vec3  ns = n_ * D.wyz - D.xzx;\r\n\r\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\r\n\r\n    vec4 x_ = floor(j * ns.z);\r\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\r\n\r\n    vec4 x = x_ *ns.x + ns.yyyy;\r\n    vec4 y = y_ *ns.x + ns.yyyy;\r\n    vec4 h = 1.0 - abs(x) - abs(y);\r\n\r\n    vec4 b0 = vec4( x.xy, y.xy );\r\n    vec4 b1 = vec4( x.zw, y.zw );\r\n\r\n    vec4 s0 = floor(b0)*2.0 + 1.0;\r\n    vec4 s1 = floor(b1)*2.0 + 1.0;\r\n    vec4 sh = -step(h, vec4(0.0));\r\n\r\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\r\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\r\n\r\n    vec3 p0 = vec3(a0.xy,h.x);\r\n    vec3 p1 = vec3(a0.zw,h.y);\r\n    vec3 p2 = vec3(a1.xy,h.z);\r\n    vec3 p3 = vec3(a1.zw,h.w);\r\n\r\n    //Normalise gradients\r\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n    p0 *= norm.x;\r\n    p1 *= norm.y;\r\n    p2 *= norm.z;\r\n    p3 *= norm.w;\r\n\r\n    // Mix final noise value\r\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\r\n    m = m * m;\r\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \r\n                                  dot(p2,x2), dot(p3,x3) ) );\r\n  }\r\n`;\r\n","import { SimplexNoise2D, SimplexNoise3D } from './SimplexNoise'\r\n\r\nexport const PixelSwarmTargetPositionShader = `\r\n  // precision highp float;\r\n  uniform float time;\r\n  uniform float delta;\r\n  uniform int targetType;\r\n\r\n  ${SimplexNoise3D}\r\n\r\n  float odeO3(float x, float y, float z, \r\n              float a1, float a2, float a3, float a4, float a5, \r\n              float a6, float a7, float a8, float a9, float a10, \r\n              float a11, float a12, float a13, float a14, float a15, \r\n              float a16, float a17, float a18, float a19, float a20) {\r\n    return a1*0.0 + a2*x + a3*x*x + a4*x*x*x + a5*x*x*y \\\r\n          + a6*x*x*z + a7*x*y + a8*x*y*y + a9*x*y*z + a10*x*z \\\r\n          + a11*x*z*z + a12*y + a13*y*y + a14*y*y*y + a15*y*y*z \\\r\n          + a16*y*z + a17*y*z*z + a18*z + a19*z*z + a20*z*z*z;\r\n  }\r\n\r\n  #define odeO3Full(x, y, z, \\\r\n                    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,  \\\r\n                    a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,  \\\r\n                    a21, a22, a23, a24, a25, a26, a27, a28, a29, a30,  \\\r\n                    a31, a32, a33, a34, a35, a36, a37, a38, a39, a40,  \\\r\n                    a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,  \\\r\n                    a51, a52, a53, a54, a55, a56, a57, a58, a59, a60) vec3( \\\r\n    odeO3(x, y, z, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,  \\\r\n          a11, a12, a13, a14, a15, a16, a17, a18, a19, a20), \\\r\n    odeO3(x, y, z, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30,  \\\r\n          a31, a32, a33, a34, a35, a36, a37, a38, a39, a40), \\\r\n    odeO3(x, y, z, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,  \\\r\n          a51, a52, a53, a54, a55, a56, a57, a58, a59, a60) \\\r\n  )\r\n\r\n  #define rescale(scale) \\\r\n    scaleFactor = scale; \\\r\n    rescaled = (target - offset) * scaleFactor; \\\r\n    float x = rescaled.x; \\\r\n    float y = rescaled.y; \\\r\n    float z = rescaled.z;\r\n\r\n  void main()\t{\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n    vec3 target = texture2D(targetPositionTex, uv).xyz;\r\n    // target.x += delta * 10.0;\r\n\r\n    float speed = 5.0;\r\n    float scaleFactor = 10.0;\r\n    vec3 offset = vec3(0.0, 0.0, 0.0);\r\n    vec3 rescaled = (target - offset) * scaleFactor;\r\n    float localTime = time + gl_FragCoord.x * 10.0 + gl_FragCoord.y * 25.0;\r\n\r\n    vec3 dtdt;\r\n\r\n    // // Sprott's D=3 O=3 flows\r\n    // dtdt = odeO3Full(rescaled.x, rescaled.y, rescaled.z,\r\n    //                   0.5, 0.0, -0.6, 0.2, -0.1, 0.2, -0.6, 0.8, -0.6, -0.4, -0.2, -0.2, -1.2, 0.4, 0.8, 0.1, 1.2, 1.2, 1.0, 0.3, 0.1, 0.4, 0.2, 0.3, 0.9, -0.4, 1.1, -0.1, -1.0, 0.2, 0.1, -1.2, 1.2, -0.6, -0.3, -0.4, 0.5, 0.2, 0.3, -0.7, 0.4, -1.1, -0.7, 0.0, 0.2, 0.5, -0.8, 0.4, -0.3, 0.2, 0.2, 0.8, -1.1, 1.1, -0.9, -0.4, 0.9, 0.2, -0.1, 1.2);\r\n\r\n    if(targetType == 1) {\r\n      // Thomas' cyclically symmetric attractor\r\n      float b = 0.208186;\r\n      dtdt.x = sin(rescaled.y) - b * rescaled.x;\r\n      dtdt.y = sin(rescaled.z) - b * rescaled.y;\r\n      dtdt.z = sin(rescaled.x) - b * rescaled.z;\r\n    } else if(targetType == 2) {\r\n      // Sprott's simplest chaotic flow, Case A\r\n      speed = 4.0;\r\n      rescale(1.0 / 120.0);\r\n      dtdt.x = rescaled.y;\r\n      dtdt.y = -rescaled.x + rescaled.y * rescaled.z;\r\n      dtdt.z = 1.0 - rescaled.y * rescaled.y;\r\n\r\n      // speed = 4.0;\r\n      // rescale(1.0 / 80.0);\r\n      // dtdt.x = y;\r\n      // dtdt.y = y*z - x;\r\n      // dtdt.z = 1.0 - y*y;\r\n    } else if(targetType == 3) {\r\n      // van der Pol oscillator\r\n      speed = 1.0;\r\n      rescale(4.0);\r\n      float A = 0.9;\r\n      float omega = 0.5;\r\n      float v = rescaled.y;\r\n      float dv = A * sin(omega * localTime) - (x*x - 1.0) * v - x;\r\n      dtdt.x = v;\r\n      dtdt.y = dv;\r\n    } else if(targetType == 4) {\r\n      // Custom - excog\r\n\r\n      // float maxInteractionDist = 0.01;\r\n      // for(float i=0.0; i<resolution.x; i++) {\r\n      //   for(float j=0.0; j<resolution.y; j++) {\r\n      //     vec3 otherTarget = texture2D(targetPositionTex, vec2(i, j) / resolution.xy).xyz;\r\n      //     if(abs(otherTarget.x - target.x) > maxInteractionDist\r\n      //       || abs(otherTarget.y - target.y) > maxInteractionDist)\r\n      //       continue;\r\n      //     dtdt.x -= otherTarget.x - target.x;\r\n      //     dtdt.y -= otherTarget.y - target.y;\r\n      //   }\r\n      // }\r\n\r\n      speed = 8.0;\r\n      rescale(5.0);\r\n      float rPhase = pow(abs(sin(time * 0.2 + gl_FragCoord.y / resolution.y * 0.2)), 2.0);\r\n      float r = 5.0 * rPhase + 0.1;\r\n      // gl_FragCoord.x / resolution.x * 2.0 * 3.14159\r\n      float a = atan(y, x) + 0.5 * pow(1.0 - rPhase, 2.0) * time * (gl_FragCoord.x / resolution.x + 0.01);\r\n\r\n      float noiseScale = 2.0;\r\n      vec3 noiseSource = vec3(x, y, z) * 1.0 + time * 0.2;\r\n      // vec3 noiseSource = vec3(1.0, 1.0, 1.0) * 1.0 + time * 0.2;\r\n      vec3 noiseV = vec3(\r\n        snoise(noiseSource + vec3(527.234, 65.34, 982.873)),\r\n        snoise(noiseSource + vec3(42.45, 22.644, 863.386)),\r\n        0\r\n      );\r\n      noiseV = vec3(\r\n        snoise(noiseSource + 0.5 * noiseV + vec3(35.642, 64.266, 3.656)),\r\n        snoise(noiseSource + 0.5 * noiseV + vec3(763.135, 7.2367, 62.8465)),\r\n        0\r\n      );\r\n      r += noiseV.x * 1.1;\r\n      // noiseV *= noiseScale;\r\n      noiseV *= 0.0;\r\n\r\n      dtdt.x += r * cos(a) - x + noiseV.x;\r\n      dtdt.y += r * sin(a) - y + noiseV.y;\r\n    }\r\n\r\n    vec3 newTarget = (rescaled + dtdt * delta * speed) / scaleFactor + offset;\r\n    \r\n    // Prevent pixel loss from chaotic blowups\r\n    if(abs(newTarget.x) > 10000.0 || abs(newTarget.y) > 10000.0 || abs(newTarget.z) > 10000.0)\r\n      newTarget = vec3(0.0, 0.0, 0.0);\r\n\r\n    gl_FragColor = vec4(newTarget, 1.0);\r\n}\r\n`;\r\n\r\nexport const PixelSwarmVelocityShader = `\r\n  // precision highp float;\r\n  uniform float time;\r\n  uniform float delta;\r\n  uniform vec2 targetScale;\r\n  uniform float velocityNoiseScale;\r\n  // uniform vec2 targetPositionOffset;\r\n  uniform vec2 dTargetOffset;\r\n\r\n  ${SimplexNoise3D}\r\n\r\n  void main()\t{\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n    vec3 pos = texture2D(positionTex, uv).xyz;\r\n    pos.xy -= dTargetOffset;\r\n    vec3 target = texture2D(targetPositionTex, uv).xyz;\r\n    target.xy *= targetScale;\r\n    // target.xy += targetPositionOffset - dTargetOffset;\r\n    vec3 v = texture2D(velocityTex, uv).xyz;\r\n\r\n    vec3 goTargetV = 2.0 * (target-pos);\r\n\r\n    float noiseScale = 20.0 * (1.0 + 2.0 * pow(length(goTargetV), 0.5));\r\n    vec3 noiseSource = vec3(1.0, 1.0, 1.0) + pos * 1.0 + time * 1.0;\r\n    // noiseSource.x += uv.x * 1475.754;\r\n    // noiseSource.y += uv.y * 286.46247;\r\n    vec3 noiseV = vec3(\r\n      snoise(noiseSource + vec3(43.521, 65.254, 982.143)),\r\n      snoise(noiseSource + vec3(654.45, 22.644, 863.345)),\r\n      0\r\n    );\r\n    noiseV = vec3(\r\n      snoise(noiseSource + 0.5 * noiseV + vec3(35.642, 64.266, 3.656)),\r\n      snoise(noiseSource + 0.5 * noiseV + vec3(763.135, 7.2367, 62.8465)),\r\n      0\r\n    );\r\n    noiseV *= noiseScale * velocityNoiseScale;\r\n    // noiseV *= 0.0;\r\n    // vec3 noiseV = vec3(0.0, 0.0, 0.0);\r\n\r\n    float decay = 0.8;\r\n    // vec3 noiseSource = vec3(uv.x, uv.y, 0) * 1000.0 + time * 1.0;\r\n    vec3 newV = decay * v + (1.0-decay) * (goTargetV + noiseV);\r\n    // newV.z = 0.0;\r\n\r\n    gl_FragColor = vec4(newV, 1.0);\r\n}\r\n`;\r\n\r\nexport const PixelSwarmPositionShader = `\r\n  // precision highp float;\r\n  uniform float delta;\r\n  uniform vec2 dTargetOffset;\r\n\r\n  void main()\t{\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n    vec3 pos = texture2D(positionTex, uv).xyz;\r\n    pos.xy -= dTargetOffset;\r\n    vec3 v = texture2D(velocityTex, uv).xyz;\r\n\r\n    // const float minDelta = 0.5;\r\n    // vec3 dpos = v * min(2.0 * delta, 1.0) + (target-pos) * min(0.5 * delta, 1.0);\r\n    // if(pos.x != target.x && abs(dpos.x) < minDelta)\r\n    //   dpos.x = clamp(target.x - pos.x, -minDelta, minDelta);\r\n    // if(pos.y != target.y && abs(dpos.y) < minDelta)\r\n    //   dpos.y = clamp(target.y - pos.y, -minDelta, minDelta);\r\n\r\n    gl_FragColor = vec4(pos + v * min(delta, 1.0), 1.0);\r\n}\r\n`;\r\n\r\n// export const PixelSwarmPositionShader = `\r\n//   precision highp float;\r\n//   uniform float delta;\r\n//   uniform sampler2D targetPositionTex;\r\n\r\n//   vec4 pack2HalfToRGBA(vec2 v) {\r\n//     vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\r\n//     return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\r\n//   }\r\n\r\n//   vec2 unpack2HalfToRGBA(vec4 v) {\r\n//     return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\r\n//   }\r\n\r\n//   void main()\t{\r\n//     vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\r\n//     highpvec2 pos = unpack2HalfToRGBA(texture2D(positionTex, uv));\r\n//     vec2 target = unpack2HalfToRGBA(texture2D(targetPositionTex, uv));\r\n\r\n//     gl_FragColor = pack2HalfToRGBA(pos + (target-pos) * min(2.0 * delta, 1.0));\r\n\r\n//     // vec3 pos = texture2D(positionTex, uv).xyz;\r\n//     // vec3 target = texture2D(targetPositionTex, uv).xyz;\r\n\r\n//     // gl_FragColor = vec4(pos + (target-pos) * min(0.5 * delta, 1.0), 1.0);\r\n// }\r\n// `;\r\n\r\nexport const PixelSwarmColorShader = `\r\n  // precision highp float;\r\n  uniform float delta;\r\n  uniform sampler2D targetColorTex;\r\n\r\n  void main()\t{\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n    vec4 color = texture2D(colorTex, uv);\r\n    vec4 target = texture2D(targetColorTex, uv);\r\n\r\n    const float minDelta = 0.1;\r\n    vec4 dcolor = (target-color) * min(0.5 * delta, 1.0);\r\n    // if(color.w != target.w && abs(dcolor.w) < minDelta)\r\n    //   dcolor.w = clamp(target.w - color.w, -minDelta, minDelta);\r\n\r\n    gl_FragColor = color + dcolor;\r\n}\r\n`;\r\n","import * as THREE from 'three';\r\nimport React, { useEffect, useState, useMemo, useRef } from 'react';\r\nimport { useFrame, useThree } from 'react-three-fiber';\r\nimport { a } from 'react-spring/three';\r\n\r\nimport { dpi } from '../config'\r\nimport { store } from '../core/state'\r\nimport GPUComputationRenderer from '../compute/GPUComputationRenderer';\r\nimport PixelSwarmShader from '../shaders/PixelSwarmShader';\r\nimport { PixelSwarmTargetPositionShader, PixelSwarmVelocityShader, PixelSwarmPositionShader, PixelSwarmColorShader} from '../shaders/PixelSwarmComputeShaders';\r\n\r\nexport default function PixelSwarm({ children, position }) {\r\n  const computeTexSize = 128;\r\n  const n = computeTexSize * computeTexSize;\r\n  \r\n  const {\r\n    gl,\r\n    size: { width, height },\r\n  } = useThree();\r\n\r\n  const [ target, setTarget ] = useState(null);\r\n  const [ targets, setTargets ] = useState(store.getState().swarmTargets);\r\n  const updateTargets = () => {\r\n    setTargets(store.getState().swarmTargets);\r\n  };\r\n  store.subscribe(() => {\r\n    updateTargets();\r\n  })\r\n\r\n  // const ascii2coeff = new Map([...\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"].map((c, i) => [c, (-1.2 + i * 0.1).toFixed(1)]));\r\n  // console.log('coeffs', [...\"RMGOLOGUGIKKAQUNYYWPNQOPVIXLCONAYGJIROPFQBFMOREQJOOUBXDIVOLY\"].map(c => ascii2coeff.get(c)).join(', '));\r\n\r\n  // gl.precision = \"mediump\";\r\n\r\n  // const { gl } = useThree();\r\n  \r\n  // Setup point attribute buffers\r\n  const positions = useMemo(\r\n    () => {\r\n      var arr = [];\r\n      for(let i = 0; i < n * 3; i+=3) {\r\n        arr.push(\r\n          Math.random() * width,\r\n          Math.random() * -height,\r\n          0\r\n        );\r\n      }\r\n      return new Float32Array(arr);\r\n    },\r\n    [n]\r\n  );\r\n  const references = useMemo(\r\n    () => {\r\n      var arr = [];\r\n      for(let i = 0; i < n * 2; i+=2)\r\n        arr.push(\r\n          (i / 2) % computeTexSize / computeTexSize, \r\n          Math.floor(i / 2 / computeTexSize) / computeTexSize,\r\n          // (i / 2 + 1) % computeTexSize / computeTexSize, \r\n          // Math.floor((i / 2 + 1) / computeTexSize) / computeTexSize\r\n        );\r\n      return new Float32Array(arr);\r\n    },\r\n    [n]\r\n  );\r\n\r\n  // const pack2HalfToRGBA = (v) => {\r\n  //   let r = [ v[0], ( v[0] * 255.0 ) % 1, v[1], ( v[1] * 255.0 ) % 1];\r\n  //   return [ r[0] - r[1] / 255.0, r[1], r[2] - r[3] / 255.0, r[3]];\r\n  // }\r\n\r\n  // Compute texture intialization\r\n  const fillPositionTex = (tex) => {\r\n    let texData = tex.image.data;\r\n    for(var i=0; i<texData.length; i+=4) {\r\n      texData[i] = positions[i / 4 * 3];\r\n      texData[i + 1] = positions[i / 4 * 3 + 1];\r\n      texData[i + 2] = positions[i / 4 * 3 + 2];\r\n    }\r\n    // for(var i=0; i<texData.length; i+=8) {\r\n    //   let xy = pack2HalfToRGBA([positions[i / 8 * 3], positions[i / 8 * 3 + 1]]);\r\n    //   let zz = pack2HalfToRGBA([positions[i / 8 * 3 + 2], positions[i / 8 * 3 + 2]]);\r\n    //   texData[i] = xy[0];\r\n    //   texData[i + 1] = xy[1];\r\n    //   texData[i + 2] = xy[2];\r\n    //   texData[i + 3] = xy[3];\r\n    //   texData[i + 4] = zz[0];\r\n    //   texData[i + 5] = zz[1];\r\n    // }\r\n  }\r\n  const fillZeroTex = (tex) => {\r\n    let texData = tex.image.data;\r\n    for(var i=0; i<texData.length; i+=4) {\r\n      texData[i] = 0.0;\r\n      texData[i + 1] = 0.0;\r\n      texData[i + 2] = 0.0;\r\n      texData[i + 3] = 0.0;\r\n    }\r\n  }\r\n\r\n  // Setup compute shaders\r\n  const [ gpuCompute, targetPositionVariable, positionVariable, targetPositionTex, velocityVariable, colorVariable, targetColorTex ] = useMemo(\r\n    () => {\r\n      let gpuCompute = new GPUComputationRenderer(computeTexSize, computeTexSize, gl);\r\n      var positionTex = gpuCompute.createTexture();\r\n      var targetPositionTex = gpuCompute.createTexture();\r\n      var velocityTex = gpuCompute.createTexture();\r\n      fillPositionTex(positionTex);\r\n      fillPositionTex(targetPositionTex);\r\n      fillZeroTex(velocityTex);\r\n      var colorTex = gpuCompute.createTexture();\r\n      var targetColorTex = gpuCompute.createTexture();\r\n      fillZeroTex(colorTex);\r\n      fillZeroTex(targetColorTex);\r\n\r\n      let targetPositionVariable = gpuCompute.addVariable(\"targetPositionTex\", PixelSwarmTargetPositionShader, targetPositionTex);\r\n      targetPositionVariable.material.uniforms[\"time\"] = { value: 0 };\r\n      targetPositionVariable.material.uniforms[\"delta\"] = { value: 0 };\r\n      targetPositionVariable.material.uniforms[\"targetType\"] = { value: 0 };\r\n      targetPositionVariable.material.uniforms[\"targetPositionTex\"] = { value: targetPositionTex };\r\n\r\n      let velocityVariable = gpuCompute.addVariable(\"velocityTex\", PixelSwarmVelocityShader, velocityTex);\r\n      velocityVariable.material.uniforms[\"time\"] = { value: 0 };\r\n      velocityVariable.material.uniforms[\"delta\"] = { value: 0 };\r\n      velocityVariable.material.uniforms[\"targetPositionTex\"] = { value: targetPositionTex };\r\n      velocityVariable.material.uniforms[\"targetScale\"] = { value: [0, 0] };\r\n      velocityVariable.material.uniforms[\"targetPositionOffset\"] = { value: [0, 0] };\r\n      velocityVariable.material.uniforms[\"dTargetOffset\"] = { value: [0, 0] };\r\n      velocityVariable.material.uniforms[\"velocityNoiseScale\"] = { value: 0 };\r\n\r\n      let positionVariable = gpuCompute.addVariable(\"positionTex\", PixelSwarmPositionShader, positionTex);\r\n      positionVariable.material.uniforms[\"delta\"] = { value: 0 };\r\n      positionVariable.material.uniforms[\"dTargetOffset\"] = { value: [0, 0] };\r\n      \r\n      gpuCompute.setVariableDependencies(targetPositionVariable, [ targetPositionVariable ]);\r\n      gpuCompute.setVariableDependencies(velocityVariable, [ positionVariable, velocityVariable, targetPositionVariable ]);\r\n      gpuCompute.setVariableDependencies(positionVariable, [ positionVariable, velocityVariable ]);\r\n\r\n      let colorVariable = gpuCompute.addVariable(\"colorTex\", PixelSwarmColorShader, colorTex);\r\n      colorVariable.material.uniforms[\"targetColorTex\"] = { value: targetColorTex };\r\n      colorVariable.material.uniforms[\"delta\"] = { value: 0 };\r\n      gpuCompute.setVariableDependencies(colorVariable, [ colorVariable ]);\r\n\r\n      var error = gpuCompute.init();\r\n      if ( error !== null ) {\r\n          console.error( error );\r\n      }\r\n      return [ gpuCompute, targetPositionVariable, positionVariable, targetPositionTex, velocityVariable, colorVariable, targetColorTex ];\r\n    },\r\n    []\r\n  );\r\n\r\n  // Update compute buffers with new target data\r\n  useEffect(\r\n    () => {\r\n      if(!target)\r\n        return;\r\n      if(target.type === \"content\" && target.positions.length > 0) {\r\n        let texData = targetPositionTex.image.data;\r\n        for(let i=0; i<texData.length; i+=4) {\r\n          texData[i] = target.positions[(i / 4 * 3) % target.positions.length];\r\n          texData[i + 1] = target.positions[(i / 4 * 3 + 1) % target.positions.length];\r\n          texData[i + 2] = target.positions[(i / 4 * 3 + 2) % target.positions.length];\r\n        }\r\n  \r\n        // for(var i=0; i<texData.length; i+=8) {\r\n        //   let xy = pack2HalfToRGBA([target.positions[i / 8 * 3], target.positions[i / 8 * 3 + 1]]);\r\n        //   let zz = pack2HalfToRGBA([target.positions[i / 8 * 3 + 2], target.positions[i / 8 * 3 + 2]]);\r\n        //   texData[i] = xy[0];\r\n        //   texData[i + 1] = xy[1];\r\n        //   texData[i + 2] = xy[2];\r\n        //   texData[i + 3] = xy[3];\r\n        //   texData[i + 4] = zz[0];\r\n        //   texData[i + 5] = zz[1];\r\n        // }\r\n        targetPositionTex.needsUpdate = true;\r\n        texData = targetColorTex.image.data;\r\n        for(let i=0; i<texData.length; i+=4) {\r\n          texData[i] = target.colors[i];\r\n          texData[i + 1] = target.colors[i + 1];\r\n          texData[i + 2] = target.colors[i + 2];\r\n          texData[i + 3] = target.colors[i + 3];\r\n        }\r\n        targetColorTex.needsUpdate = true;\r\n      } else {\r\n        let texData = targetPositionTex.image.data;\r\n        for(let i=0; i<texData.length; i+=4) {\r\n          texData[i] = (Math.random() - 0.5);\r\n          texData[i + 1] = (Math.random() - 0.5);\r\n          texData[i + 2] = 0.0;\r\n        }\r\n\r\n        texData = targetColorTex.image.data;\r\n        for(let i=0; i<texData.length; i+=4) {\r\n          texData[i] = 0;\r\n          texData[i + 1] = 0;\r\n          texData[i + 2] = 0;\r\n          texData[i + 3] = 0.4 + 0.6 * Math.random();\r\n        }\r\n        targetColorTex.needsUpdate = true;\r\n      }\r\n  \r\n      gpuCompute.renderTexture(targetPositionTex, gpuCompute.getCurrentRenderTarget(targetPositionVariable));\r\n    }, [target]\r\n  );\r\n\r\n  const [swarmShader] = useMemo(() => {\r\n    const loader = new THREE.TextureLoader();\r\n    const swarmShader = new PixelSwarmShader({\r\n      pointTexture: loader.load('/textures/box-shadow-16px.png'),\r\n      posOffset: [0, 0],\r\n      time: 0,\r\n      targetType: 0,\r\n    });\r\n    return [swarmShader]\r\n  }, []);\r\n\r\n  const [ lastTime, lastTargetOffset ] = useMemo(\r\n    () => {\r\n      return [ \r\n        { value: performance.now() },\r\n        { value: [ 0, 0 ] },\r\n       ]\r\n    }, []\r\n  );\r\n  useFrame(() => {\r\n    let curTime = performance.now();\r\n    let dtime = Math.min((curTime - lastTime.value) / 1000, 0.1);\r\n    lastTime.value = performance.now();\r\n    // console.log('dtime', dtime * 1000.0);\r\n    // setLastTime(curTime);\r\n\r\n    // Update time-related variables\r\n    targetPositionVariable.material.uniforms[\"time\"].value = curTime / 1000.0;\r\n    targetPositionVariable.material.uniforms[\"delta\"].value = dtime;\r\n    velocityVariable.material.uniforms[\"time\"].value = curTime / 1000.0;\r\n    velocityVariable.material.uniforms[\"delta\"].value = dtime;\r\n    positionVariable.material.uniforms[\"delta\"].value = dtime;\r\n    colorVariable.material.uniforms[\"delta\"].value = dtime;\r\n    swarmShader.uniforms.time.value = curTime / 1000.0;\r\n\r\n    // Find the most appropriate `SwarmTarget`\r\n    let intendedTarget;\r\n    let scrollTop = document.scrollingElement.scrollTop;\r\n    // Ref: https://stackoverflow.com/a/8876069\r\n    var viewport = [\r\n      Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\r\n      Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\r\n    ];\r\n    let maxPriority = 0;\r\n    let targetIds = Object.keys(targets);\r\n    for(let i=0; i<targetIds.length; i++) {\r\n      let el = document.getElementById(targets[targetIds[i]].id);\r\n      // Is target inside the viewport?\r\n      if(el.offsetTop + el.offsetHeight > scrollTop && el.offsetTop < scrollTop + viewport[1]) {\r\n        let visibleHeight = Math.min(scrollTop + viewport[1], el.offsetTop + el.offsetHeight)\r\n                          - Math.max(scrollTop, el.offsetTop);\r\n        let priority = visibleHeight;\r\n        // Still has a part below the viewport's edge?\r\n        if(el.offsetTop + el.offsetHeight > scrollTop + viewport[1])\r\n          priority *= 2.0;\r\n        if(priority > maxPriority) {\r\n          maxPriority = priority;\r\n          intendedTarget = targets[targetIds[i]];\r\n        }\r\n      }\r\n    }\r\n    if(intendedTarget && intendedTarget !== target) {\r\n      setTarget(intendedTarget);\r\n    }\r\n\r\n    // Update target's size and position in compute shader\r\n    if(target) {\r\n      let targetEl = document.getElementById(target.id);\r\n      let targetSize = [\r\n        targetEl.offsetWidth,\r\n        targetEl.offsetHeight\r\n      ];\r\n      let targetOffset = [\r\n        targetEl.offsetLeft + targetSize[0] / 2, \r\n        -targetEl.offsetTop - targetSize[1] / 2\r\n      ];\r\n\r\n      // Keep compute values near [0,0] to preserve the precision on mobile\r\n      let dTargetOffset = [ \r\n        targetOffset[0] - lastTargetOffset.value[0],\r\n        targetOffset[1] - lastTargetOffset.value[1]\r\n      ];\r\n      velocityVariable.material.uniforms[\"dTargetOffset\"].value = dTargetOffset;\r\n      velocityVariable.material.uniforms[\"targetScale\"].value = targetSize;\r\n      positionVariable.material.uniforms[\"dTargetOffset\"].value = dTargetOffset;\r\n      lastTargetOffset.value = targetOffset;\r\n\r\n      // Which type of dynamics should the shader compute?\r\n      let targetType = 0;\r\n      let velocityNoiseScale = 1.0;\r\n      switch(target.type) {\r\n        case \"content\":\r\n          targetType = 0;\r\n          break;\r\n        case \"generative-thomas\":\r\n          targetType = 1;\r\n          break;\r\n        case \"generative-sprott\":\r\n          targetType = 2;\r\n          break;\r\n        case \"generative-van-der-pol\":\r\n          targetType = 3;\r\n          break;\r\n        case \"generative-excog\":\r\n          targetType = 4;\r\n          velocityNoiseScale = 0.0;\r\n          break;\r\n        default:\r\n          targetType = 0;\r\n      }\r\n      targetPositionVariable.material.uniforms[\"targetType\"].value = targetType;\r\n      velocityVariable.material.uniforms[\"velocityNoiseScale\"].value = velocityNoiseScale;\r\n\r\n      swarmShader.uniforms.targetType.value = targetType;\r\n      swarmShader.uniforms.pointScale.value = target.scale / 2 * dpi;\r\n      swarmShader.uniforms.posOffset.value = targetOffset;\r\n    } else {\r\n      velocityVariable.material.uniforms[\"dTargetOffset\"].value = [ 0, 0 ];\r\n      positionVariable.material.uniforms[\"dTargetOffset\"].value = [ 0, 0 ];\r\n    }\r\n    // let t1 = Date.now();\r\n    // let time = Date.now() * 0.0005;\r\n    // let pos = posAttr.current.array;\r\n    // let alpha = alphaAttr.current.array;\r\n    // posAttr.current.needsUpdate = true;\r\n    // alphaAttr.current.needsUpdate = true;\r\n\r\n    gpuCompute.compute();\r\n    swarmShader.uniforms.positionTex.value = gpuCompute.getCurrentRenderTarget(positionVariable).texture;\r\n    swarmShader.uniforms.colorTex.value = gpuCompute.getCurrentRenderTarget(colorVariable).texture;\r\n    // console.log('itertime', performance.now() - curTime);\r\n  });\r\n  return (\r\n    <>\r\n      <a.points position={position} frustumCulled={false}>\r\n        <bufferGeometry attach=\"geometry\">\r\n          <bufferAttribute\r\n            attachObject={['attributes', 'position']}\r\n            count={positions.length / 3}\r\n            array={positions}\r\n            itemSize={3}\r\n          />\r\n          <bufferAttribute\r\n            attachObject={['attributes', 'reference']}\r\n            count={references.length / 2}\r\n            array={references}\r\n            itemSize={2}\r\n          />\r\n        </bufferGeometry>\r\n        <shaderMaterial\r\n          attach=\"material\"\r\n          args={[swarmShader]}\r\n        />\r\n      </a.points>\r\n    </>\r\n  )\r\n};\r\n","export function shuffle(a, stride=1, repeatIndices=null, repeatStride=1) {\r\n  let ii = 0;\r\n  let indices = [];\r\n  for (let i = a.length - stride; i > 0; i -= stride) {\r\n    const j = repeatIndices ? repeatIndices[ii++] / repeatStride * stride : Math.floor(Math.random() * (i / stride + 1)) * stride;\r\n    indices.push(j);\r\n    for(let k=0; k<stride; k++)\r\n      [a[i+k], a[j+k]] = [a[j+k], a[i+k]];\r\n  }\r\n  return indices;\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { dpi } from '../config'\r\nimport { updateSwarmTarget, removeSwarmTarget } from '../core/state'\r\nimport { shuffle } from '../util/array';\r\nimport HTMLRenderer from '../util/HTMLRenderer';\r\n\r\nfunction SwarmTarget({ children, id, size, image, targetData, updateSwarmTarget, removeSwarmTarget, type=\"content\", scale=4 }) {\r\n  // const [ size, setSize ] = useState([window.innerWidth, window.innerHeight]);\r\n\r\n  // useEffect(() => {\r\n  //   const onResize = () => { setSize([window.innerWidth, window.innerHeight]); console.log('onResize', window.innerHeight); };\r\n  //   // window.addEventListener('orientationchange', onResize);\r\n  //   window.addEventListener('resize', onResize);\r\n  //   return () => {\r\n  //     // window.removeEventListener('orientationchange', onResize);\r\n  //     window.removeEventListener('resize', onResize);\r\n  //   }\r\n  // }, [])\r\n\r\n  const el = useRef();\r\n  useEffect(\r\n    () => {\r\n      async function renderContent() {\r\n        let positions = [];\r\n        let colors = [];\r\n        \r\n        let newTargetData = targetData;\r\n        if(!newTargetData) {\r\n          newTargetData = {\r\n            id: id,\r\n          };\r\n        }\r\n        newTargetData.type = type;\r\n        newTargetData.scale = scale;\r\n        if(type === \"content\" && !('positions' in newTargetData)) {\r\n          // let canvas = await HTMLRenderer.render(children);\r\n          // console.log('canvas.width', canvas.width)\r\n          // let img = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\r\n          let img = await HTMLRenderer.renderImage(image, size);\r\n          for(let i = 0; i < img.length / 4; i++) {\r\n            let pix = [img[i*4], img[i*4+1], img[i*4+2], img[i*4+3]];\r\n            if(pix[3] > 0.0) {\r\n              positions.push(\r\n                ((i % (size[0] * dpi)) / dpi + 0.25) / size[0] - 0.5, \r\n                (-Math.floor(i / (size[0] * dpi)) / dpi + 0.25) / size[1] + 0.5, \r\n                0\r\n              );\r\n              colors.push(\r\n                pix[0] / 255.0,\r\n                pix[1] / 255.0,\r\n                pix[2] / 255.0,\r\n                pix[3] / 255.0 * (0.4 + 0.6 * Math.random())\r\n                // Math.min(1.0 - (pix[0] + pix[1] + pix[2]) / 3 / 255.0 , pix[3] / 255.0) * (0.4 + 0.6 * Math.random())\r\n              );\r\n            }\r\n          }\r\n          let shuffleIndices = shuffle(positions, 3);\r\n          shuffle(colors, 4, shuffleIndices, 3);\r\n          \r\n          // console.log('newShape.length', newShape.length)\r\n          // while(newShape.length < positions.length)\r\n          //   newShape.push(0, 0, 0);\r\n          // while(newAlphas.length < alphas.length)\r\n          //   newAlphas.push(0);\r\n\r\n          newTargetData.positions = positions;\r\n          newTargetData.colors = colors;\r\n        }\r\n      \r\n        // if(newShape.length > 0)\r\n          updateSwarmTarget(id, newTargetData);\r\n        // else\r\n        //   setTimeout(renderContent, 500);\r\n      };\r\n      // // Wait for Three.js to intialize, otherwise the rendering can fail\r\n      // let waitForGL = setInterval(() => {\r\n      //   if(document.getElementById(\"gl-canvas\")) {\r\n      //     setTimeout(renderContent, 100);\r\n      //     // renderContent();\r\n      //     clearInterval(waitForGL);\r\n      //   }\r\n      // }, 100);\r\n      renderContent();\r\n\r\n      return () => {\r\n        removeSwarmTarget(id);\r\n      }\r\n    }, [el, type, scale]\r\n  );\r\n\r\n  return (\r\n    <div id={id} className=\"swarm-target\" ref={el}>\r\n      <div style={{width: size[0]+'px', height: size[1]+'px'}}></div>\r\n      {/* {children} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  if(ownProps.id in state.swarmTargets) {\r\n    return {\r\n      targetData: state.swarmTargets[ownProps.id]\r\n    };\r\n  }\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateSwarmTarget: (target, payload) => {\r\n      dispatch(updateSwarmTarget(target, payload));\r\n    },\r\n    removeSwarmTarget: (target) => {\r\n      dispatch(removeSwarmTarget(target));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SwarmTarget);\r\n","import React from 'react'\r\nimport SwarmTarget from './SwarmTarget'\r\n\r\nexport default function ProjectInfo({ project }) {\r\n  return (\r\n    <div className=\"project\" key={project.id}>\r\n      <div className=\"container\">\r\n        <div className={\"project-name \" + project.id}>{project.name}</div>\r\n        <div className=\"project-desc\">{project.desc}</div>\r\n        {project.tech && <div className=\"project-tech\">\r\n          <span className=\"tech-list\">\r\n            {project.tech.map((tech, i) =>\r\n              <div key={i} className=\"item\">{tech}</div>\r\n            )}\r\n          </span>\r\n        </div>}\r\n        {project.links && <div className=\"project-links\">\r\n          {project.links.map((link, i) => \r\n            <a key={i} href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {link.label}\r\n            </a>\r\n          )}\r\n        </div>}\r\n      </div>\r\n      <div className=\"container project-preview-media\">\r\n        {project.image && \r\n          <>\r\n            <img src={project.image} alt={project.name + \" preview\"} />\r\n            <div className=\"shadow\" />\r\n          </>\r\n        }\r\n        {project.video && \r\n          <>\r\n            <video autoPlay playsInline loop muted src={project.video} />\r\n            <div className=\"shadow\" />\r\n          </>\r\n        }\r\n        {/* <SwarmTarget \r\n          id={\"project-symbol-\" + project.id} \r\n          type={project.previewType} \r\n          size={project.previewSize} \r\n          scale={project.previewScale ? project.previewScale : 4} \r\n          image={project.image}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useEffect, useState, useMemo, useRef } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport FontAwesome from 'react-fontawesome'\nimport './App.scss';\n\nimport { dpi } from './config'\nimport { store } from './core/state'\nimport { sleep } from './util/time'\nimport { ProjectData } from './data/ProjectData'\nimport SceneController from './components/SceneController'\nimport RenderText from './components/RenderText'\nimport ProjectPreview from './components/ProjectPreview'\nimport PixelSwarm from './components/PixelSwarm'\nimport SwarmTarget from './components/SwarmTarget'\nimport ProjectInfo from './components/ProjectInfo'\n\n// const gpu = new GPU({mode: \"gpu\"});\n\nfunction App() {\n  const [ locked, setLocked ] = useState(true);\n\n  const [ logoShape, setLogoShape ] = useState(\"content\");\n  const [ revealStage, setRevealStage ] = useState(0);\n  useEffect(\n    () => {\n      const reveal = async() => {\n        await sleep(4000);\n        setRevealStage(1);\n        await sleep(2000);\n        setRevealStage(2);\n        await sleep(1500);\n        setLogoShape(\"generative-excog\");\n        await sleep(1000);\n        setLocked(false);\n      };\n      reveal();\n      // // document.documentElement.className = \"locked\";\n      // setTimeout(() => {\n      //   // document.documentElement.className = \"\";\n      //   setLocked(false);\n      // }, 1000);\n    }, []\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-canvas\">\n        <Canvas\n          id=\"gl-canvas\"\n          camera={{\n            fov: 75,\n            near: 1.0,\n            far: 10000,\n            position: [0, 0, 1000],\n            rotation: new THREE.Euler(0, 0, 0)\n          }}\n          orthographic={true}\n          pixelRatio={window.devicePixelRatio || 1}\n          onCreated={({ gl }) => { gl.shadowMap.enabled = true; gl.shadowMap.type = THREE.PCFSoftShadowMap; }}>\n          <SceneController>\n          <PixelSwarm position={[0, 0, 0]} />\n            {/* <mesh \n              position={new THREE.Vector3(0, -200, 0)}\n              rotation={new THREE.Euler(0, 0, 0)} \n              castShadow \n              receiveShadow>\n              <boxGeometry attach=\"geometry\" args={[200, 200, 200]} />\n              <meshStandardMaterial attach=\"material\" />\n            </mesh> */}\n            {/* <RenderText opacity={1} position={new THREE.Vector3(0, 10, 0)} color=\"black\">\n              Hello, dear traveller\n            </RenderText> */}\n          </SceneController>\n        </Canvas>\n      </div>\n      <div className=\"content\">\n        {/* <div style={{ height: '525vh' }} /> */}\n        <div className=\"hero\">\n          <div className=\"welcome\">\n            <SwarmTarget id=\"logo\" type={logoShape} size={[ 200, 200 ]} scale={4} image=\"/textures/logo.png\"/>\n            <div className={\"welcome-line\" + (revealStage < 1 ? \" hidden\" : \"\")}>\n              Hello, dear traveller\n            </div>\n            <div className={\"welcome-line\" + (revealStage < 2 ? \" hidden\" : \"\")}>\n              i'm GoS, and here's stuff i love and do\n            </div>\n          </div>\n          <div className={\"proceed\" + (locked ? \" hidden\" : \"\")}>\n            <FontAwesome name=\"caret-down\" />\n          </div>\n        </div>\n        <div className={\"delayed-content\" + (locked ? \" locked\" : \"\")}>\n          {/* <div className=\"container\"> */}\n            {ProjectData.inProgress.map((project, i) => \n              <ProjectInfo key={i} project={project} />\n            )}\n            <div className=\"container\">\n              <div className=\"project-group-header\">\n                Archive\n              </div>\n            </div>\n            {ProjectData.archive.map((project, i) => \n              <ProjectInfo key={i} project={project} />\n            )}\n            {/* <SwarmTarget id=\"epilogue\" type=\"generative-thomas\" size={[ 400, 400 ]} scale={4} /> */}\n            <div className=\"container\">\n              <div className=\"footer\">\n                <a href=\"https://twitter.com/just_gos\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <FontAwesome name=\"twitter\" />\n                </a>\n              </div>\n            </div>\n          </div>\n        {/* </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './core/state'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}